// Generated by Xata Codegen 0.26.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "video",
    columns: [
      { name: "video", type: "file" },
      { name: "clips", type: "file[]" },
      { name: "folder", type: "link", link: { table: "folder" } },
      { name: "fileName", type: "string", notNull: true, defaultValue: "null" },
    ],
  },
  {
    name: "folder",
    columns: [
      { name: "name", type: "string", unique: true },
      { name: "slug", type: "string", unique: true },
      { name: "userId", type: "string", notNull: true, defaultValue: "null" },
    ],
    revLinks: [{ column: "folder", table: "video" }],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Video = InferredTypes["video"];
export type VideoRecord = Video & XataRecord;

export type Folder = InferredTypes["folder"];
export type FolderRecord = Folder & XataRecord;

export type DatabaseSchema = {
  video: VideoRecord;
  folder: FolderRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://James-Q-Quick-s-workspace-l5kbra.us-east-1.xata.sh/db/files-test",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
